//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "string.h"




//############################################################################
//                                                                           #
//                           Class string                            #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
int string::MAX_SIZE=100;

string::string(void)
{
	character =new char[4];
	character[0]='T';
	character[1]='O';
	character[2]='T';
	character[3]='O';
	length=4;
	capacity=4;
}

/* PARTIE 2
string::string(const char* sentence, int my_size)
{
	character=new char[length];
	int i=0;
	for(i=0;i<my_size;i++)
	{
		character[i]=sentence[i];
	}
	character[i+1]='\0';
	length =  my_size;
	capacity = my_size;
}
*/

void string::display(void)
{
	 int i=0;
	 for(i=0;i<length;i++)
	 {
	 	printf("%c", character[i]);
	 }
	 printf("\n");
}

// ===========================================================================
//                                  Destructor
// ===========================================================================
string::~string(void)
{
	delete character;
	character = NULL;
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================

// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
